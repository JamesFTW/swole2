/**
 * 
 * TODO: Add check to see if file is created before exporting.
 * 
 */

const fs = require('fs');
const path = require('path');

//figure out how to get this working


let files = {
  './app/components': './app/components/index.js',
  './app/layout': './app/layout/index.js',
  './app/features': './app/features/index.js'
}


let outputString = '';
let outputFile = ""


for (var componentsDir in files) {

  outputFile = files[componentsDir]

  fs.writeFileSync(outputFile, 
`/***************************************************************
  THIS FILE IS AUTOGENERATED!!
  use command 'npm run compile' to export files
***************************************************************/ \n \n`);

    traverseDirectory(componentsDir);
    fs.appendFileSync(outputFile, outputString);
    outputString = ""

}




function traverseDirectory(dir) {
  // Get a list of all files and subdirectories in the current directory
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  
  for (const entry of entries) {
    const entryPath = path.join(dir, entry.name);

    if (entry.isDirectory()) {
      // Recursively traverse subdirectories
      traverseDirectory(entryPath);
    } else if (entry.isFile() && path.extname(entry.name) === '.js') {
      // Check if a file with the same name and a capitalized first letter exists
      const baseName = path.basename(entryPath, '.js');
      const expectedName = baseName.charAt(0).toUpperCase() + baseName.slice(1);
      const matchingPath = path.join(dir, expectedName + '.js');
      
      const parsePath = path.parse(matchingPath)
      const base = parsePath.base

      const parentDirectory = parsePath.dir.split('/')[2]
      const baseWithoutJs = base.replace('.js', "").toLocaleLowerCase()
  
      if (parentDirectory === baseWithoutJs) {
        // If the file exists, add an export statement to the output string
        const namedExport = expectedName.replace(/-(.)/g, (_, letter) => letter.toUpperCase());
        const relativePath = path.relative(path.dirname(outputFile), matchingPath);
        outputString += `export { ${namedExport} } from './${relativePath}';\n`;
      }
    }
  }
}